---
title: 'Other Grouped Operations in Pandas'
---

```{python}
# | echo: false
# Setup
import pandas as pd

pd.options.display.max_rows = 10
```

## Introduction

In our previous lessons, you've learned how to extract summary statistics from groups using `groupby()` and `agg()`. Now, we'll take a step further by exploring some additional useful grouped data transformations. Let's get started. 

## Learning Objectives

By the end of this lesson, you will be able to:

- Add group-level summary statistics as new columns using `transform()`.
- Count values within groups using `value_counts()`.
- Compute cumulative sums within groups.

## Imports

Run the following cell to import the necessary libraries:

```{python}
import pandas as pd
import vega_datasets as vd
import plotly.express as px
import warnings
import calendar
```

## Data

We'll use the `weather` dataset for our examples.

```{python}
weather_raw = vd.data.seattle_weather()

# Select just 2012 data using query and add a month column
weather = weather_raw.query("date.dt.year == 2012")
weather["month"] = pd.Categorical(
    weather["date"].dt.strftime("%B"),
    categories=list(calendar.month_name[1:]),
    ordered=True,
)
weather
```

Now let's set the display options for the rest of the lesson:

```{python}
# | eval: false
pd.options.display.max_rows = 20
```

And let's ignore the warnings that come up when working with categorical data with the current version of pandas:

```{python}
warnings.filterwarnings(
    "ignore"
)  ## There is a class of warnings that come up when working with categorical data with the current version of pandas that we can ignore
```

## Adding Summary Statistics Using `transform()`

In the previous lesson, you learned how to calculate summary statistics like mean, median, or standard deviation using `agg()`. 

For example, to compute the mean precipitation (rain + snow) for each month, you could use:

```{python}
weather.groupby('month').agg(mean_precip = ('precipitation', 'mean'))
```

Sometimes, we want to add these group-level statistics as new columns to our original DataFrame. We can't do this directly with the `agg()` output: 

```{python}
# Does not work
weather['mean_precip'] = weather.groupby('month').agg(mean_precip = ('precipitation', 'mean'))
weather
```

But we can do this using `transform()`. `transform()` reshapes the output to match the original DataFrame's shape, allowing us to add the group-level statistics as new columns.

```{python}
weather['mean_precip_month'] = weather.groupby('month')['precipitation'].transform('mean')
weather
```

You can compute other statistics similarly. For example, to compute the median precipitation for each month, you could use:

```{python}
weather['prep_median_month'] = weather.groupby('month')['precipitation'].transform('median')    
weather
```

Or to get the sum of precipitation for each month:

```{python}
weather['precip_sum_month'] = weather.groupby('month')['precipitation'].transform('sum')
weather
```

With the sum in hand, we can easily calculate the proportion of that month's precipitation that fell on each day:

```{python}
weather["precip_month_prop"] = weather["precipitation"] / weather["precip_sum_month"]
weather
```

::: {.callout-tip title="Practice"}

## Practice Q: Daily Tip Proportions

Using the `tips` dataset, calculate:
1. A new column `daily_total_tips` containing the total tips for each day
2. A new column `tip_proportion` showing what proportion of that day's total tips came from each customer

```{python}
# Your code here:
tips = px.data.tips()
tips
```

The first few rows of your output data should look something like this:

```
total_bill    tip     sex      smoker    day    time      size    daily_total_tips    tip_proportion
16.99         1.01    Female   No        Sun    Dinner    2       247.39              0.004083
10.34         1.66    Male     No        Sun    Dinner    3       247.39              0.006710
21.01         3.50    Male     No        Sun    Dinner    3       247.39              0.014148
23.68         3.31    Male     No        Sun    Dinner    2       247.39              0.013380
```

```{python}
# | echo: false
# | eval: false
# Solution
tips["daily_total_tips"] = tips.groupby("day")["tip"].transform("sum")
tips["tip_proportion"] = tips["tip"] / tips["daily_total_tips"]
tips
```


:::

Let's reinitialize the `weather` DataFrame to a smaller set of columns for the rest of the lesson:

```{python}
weather = weather[['date', 'month', 'precipitation', 'wind', 'weather']]
weather
```


## Counting Values Within Groups Using `value_counts()`

Counting occurrences of categorical variables within groups can reveal interesting patterns, and you often need to do this after using `groupby()`.

First, let's recall how `value_counts()` works on the entire DataFrame.

```{python}
# Count of weather types
weather["weather"].value_counts()
```

We can add `normalize=True` to get proportions:

```{python}
weather['weather'].value_counts(normalize=True)
```

Now, to count weather types within each month, we first group by `month`, then subset the `weather` column and apply `value_counts()` to it.

```{python}
# Counts of weather types per month
weather.groupby('month')['weather'].value_counts()
```

This returns a Series with a MultiIndex, which can be converted to a regular DataFrame with `reset_index()`:

```{python}
weather.groupby('month')['weather'].value_counts().reset_index()
```

::: {.callout-tip title="Practice"}

## Practice Q: Count Smokers and Non-Smokers by Day

Using the `tips` dataset, count the number of smokers and non-smokers for each day.

```{python}
tips = px.data.tips()
tips

# Your code here:
```

The first few rows of your result should look something like this:

```
day	smoker	count
Fri	Yes	15
Fri	No	4
Sat	No	45
```

```{python}
# | echo: false
# | eval: false
## Solution
smoker_counts = tips.groupby("day")["smoker"].value_counts().reset_index(name="count")
smoker_counts
```

:::

## Computing Cumulative Sums Within Groups

Cumulative sums help track running totals within groups. This is an often-useful operation. Let's see how we can do this to grouped data.

As a recall, here's how we can compute the cumulative sum of precipitation for the entire DataFrame:

```{python}
# Cumulative sum of precipitation
weather["precip_cumul"] = weather["precipitation"].cumsum()
weather
```

To compute cumulative precipitation within each month, we can use `groupby()` and `cumsum()`:

```{python}
# Cumulative precipitation per month
weather["precip_cumul"] = weather.groupby("month")["precipitation"].cumsum()
weather
```

::: {.callout-practice title="Practice Q1: Cumulative Tip Amount by Day"}

## Practice Q: Cumulative Tip Amount by Day

Using the `tips` dataset, compute the cumulative sum of `total_bill` for each `day`, adding a new column `cumul_total_bill_day`. Then add another column `cumul_tip_day` that contains the cumulative sum of `tip` for each `day`.

```{python}
tips = px.data.tips()
tips = tips.sort_values('day')
tips
# Your code here:
```

```{python}
# | echo: false
# | eval: false
tips["cumul_tip_day"] = tips.groupby("day")["tip"].cumsum()
tips["cumul_total_bill_day"] = tips.groupby("day")["total_bill"].cumsum()
tips[["day", "cumul_tip_day", "cumul_total_bill_day"]]
```

:::

## Wrap-Up

In this lesson, you've learned several powerful **group-level data transformations** in pandas:

- **Adding Summary Statistics**: Using `transform()` to add group-level calculations as new columns
- **Counting Within Groups**: Using `value_counts()` to count occurrences in groups 
- **Computing Cumulative Sums**: Tracking running totals within groups

These techniques allow you to analyze patterns and statistics within specific subsets of your data. Keep practicing with different datasets to build your data manipulation skills!

See you next time!