---
title: '连接 2:一对多、多键连接与键不匹配'
---

## 包

```{python}
import pandas as pd
import country_converter as cc
```

## 数据

运行以下代码以加载和定义本课程中使用的数据集。

```{python}


# 加载数据集
oil_consumption = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_consumption.csv"
)
tidyr_population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
country_regions = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/country_continent_data.csv"
)


oil_2012 = (
    oil_consumption[oil_consumption["year"] == 2012].copy().drop(columns=["year"])
)

# 人员数据
people = pd.DataFrame({"name": ["Alice", "Bob", "Charlie"], "age": [25, 32, 45]})

test_info_many = pd.DataFrame(
    {
        "name": ["Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"],
        "test_date": [
            "2023-06-05",
            "2023-06-10",
            "2023-08-10",
            "2023-05-02",
            "2023-05-12",
            "2023-05-15",
        ],
        "result": [
            "Negative",
            "Positive",
            "Positive",
            "Negative",
            "Negative",
            "Negative",
        ],
    }
)

farm_info = pd.DataFrame(
    {
        "farm_id": [1, 2, 3],
        "farm_name": ["Green Acres", "Harvest Hill", "Golden Fields"],
        "location": ["County A", "County B", "County A"],
    }
)

crop_yields = pd.DataFrame(
    {
        "farm_id": [1, 1, 2, 3, 3],
        "crop": ["Wheat", "Corn", "Soybeans", "Wheat", "Barley"],
        "yield_tons": [50, 60, 45, 55, 30],
    }
)

traffic_flow = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "vehicle_count": [1200, 900, 1500, 1100, 700, 600],
    }
)

pollution_levels = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "pm_2_5_level": [35.5, 42.1, 40.3, 48.2, 25.7, 30.9],
    }
)

test_info_diff = pd.DataFrame(
    {
        "name": ["alice", "Bob", "Charlie "],
        "test_date": ["2023-06-05", "2023-08-10", "2023-05-02"],
        "result": ["Negative", "Positive", "Negative"],
    }
)

asia_countries = pd.DataFrame(
    {
        "Country": ["India", "Indonesia", "Philippines"],
        "Capital": ["New Delhi", "Jakarta", "Manila"],
    }
)

asia_population = pd.DataFrame(
    {
        "Country": ["India", "indonesia", "Philipines"],
        "Population": [1393000000, 273500000, 113000000],
        "Life_Expectancy": [69.7, 71.7, 72.7],
    }
)
```

## 介绍

现在我们对不同类型的连接及其工作原理有了扎实的掌握,我们可以看看如何管理更复杂的连接和更混乱的数据。

## 学习目标

-   您了解一对多连接的概念

-   您知道如何在多个键列上进行连接

-   您知道如何检查数据框之间的不匹配值

## 一对多连接

到目前为止,我们主要研究了一对一连接,其中一个数据框中的一个观测值对应另一个数据框中的仅一个观测值。在一对多连接中,一个数据框中的一个观测值对应另一个数据框中的多个观测值。

为了说明一对多连接,让我们回到患者及其 COVID 测试数据。假设在我们的数据集中,`Alice` 和 `Xavier` 多次接受了 COVID 测试。我们可以在 `test_info` 数据框中添加两行他们的新测试信息:

```{python}
people
```

```{python}
test_info_many
```

接下来,让我们看看当我们使用 `people` 作为左数据框进行 `merge()` 时会发生什么:

```{python}
pd.merge(people, test_info_many, on="name", how="left")
```

上面发生了什么?基本上,当您执行一对多连接时,“一”方的数据会为“多”方的每个匹配行重复。

::: {.callout-tip title="练习"}

## 练习题:合并一对多农作物产量

运行以下代码以打印两个小数据框:

```{python}
farm_info
```

```{python}
crop_yields
```

如果您使用 `merge()` 来连接这些数据集,最终的数据框中将有多少行?试着计算一下,然后执行连接以查看答案是否正确。

:::

## 多键列

有时我们有不止一个列可以唯一标识我们想要匹配的观测值。例如,假设我们有三条街道在两个不同时间点(上午 9 点和下午 2 点)的交通流量数据。

```{python}
traffic_flow
```

现在,假设我们有另一组针对相同三条街道在同一时间点记录的空气污染水平(以颗粒物 PM2.5 衡量)数据。

```{python}
pollution_levels
```

我们想要连接这两个数据集,使每条街道有两行:一行对应上午 9 点,一行对应下午 2 点。为此,我们的第一个直觉可能是*仅*在 `street_name` 上进行连接。让我们试一下,看看会发生什么:

```{python}
pd.merge(traffic_flow, pollution_levels, on="street_name", how="left")
```

如我们所见,这完全不是我们想要的结果!我们得到了重复的行——每条街道现在有**四行**。

我们想要的是同时匹配 `street_name` 和 `time_of_day`。为此,我们需要通过在列表中指定两个列名,告诉 Python 要在两列上匹配。

```{python}
pd.merge(traffic_flow, pollution_levels, on=["street_name", "time_of_day"])
```

现在我们有了正确的行数!我们可以直接看到每条街道在每个时间点的车辆数量和 PM2.5 水平。

::: {.callout-tip title="练习"}

## 练习题:计算人均油耗

我们有两个包含国家信息的数据集:

- `oil_consumption`:包含年度油耗(吨)
- `tidyr_population`:包含年度人口数据

```{python}
# 查看数据集
oil_consumption.sort_values(by=["country", "year"])
```

```{python}
tidyr_population.sort_values(by=["country", "year"])
```

1. 使用左连接的 `merge()` 连接这些数据集。由于我们想匹配国家和年份,您需要在多个列上进行连接。(您可能会注意到并非所有行都匹配。您可以暂时忽略这一点。)

2. 连接后,创建一个名为 `consumption_per_capita` 的新列,计算每人的年度油耗(吨)。

3. 1995 年哪个国家的人均油耗最高?

```{python}
# | echo: false
# | eval: false
# 解决方案
oil_pop = oil_consumption.merge(tidyr_population, on=["country", "year"], how="left")

oil_pop["consumption_per_capita"] = (oil_pop["oil_consump"] * 1000) / oil_pop[
    "population"
]
oil_pop_1995 = oil_pop.query("year == 1995")
oil_pop_1995.sort_values(by="consumption_per_capita", ascending=False).head(1)
```

:::

## 键不匹配

在从不同来源提取数据后,您通常需要预先清理数据,才能进行连接。这是因为记录值的方式可能存在不一致。

举例来说,让我们回到第一课的模拟患者数据。如果您还记得,我们有两个数据框,一个名为 `people`,另一个名为 `test_info`。我们可以重新创建这些数据集,但将 `test_info_diff` 数据集中的 `Alice` 更改为 `alice`,并保持所有其他值不变。

```{python}
people
```

```{python}
test_info_diff
```

现在让我们尝试对这两个数据集进行 `merge()`。

```{python}
people.merge(test_info_diff, on='name', how='left')
```

```{python}
pd.merge(people, test_info_diff, on="name", how="inner")
```

如我们所见,Python 没有将 `Alice` 和 `alice` 识别为同一个人,并且它也无法匹配 `Charlie` 和 `Charlie `!因此,在左连接中我们失去了 `Alice` 和 `Charlie`,在内连接中它们被删除了。

我们如何解决这个问题?我们需要确保两个数据集中的名称格式相同。为此,我们可以使用 `str.title()` 将每个名称的首字母大写。

```{python}
test_info_diff['name'] = test_info_diff['name'].str.title()
test_info_diff
```

```{python}
people.merge(test_info_diff, on='name', how='inner')
```

嗯,Charlie 仍然没有匹配。从打印输出中很难看出,但 `test_info_diff` 中的字符串 `Charlie ` 在末尾有一个额外的空格。

我们可以通过使用 `.unique()` 将其转换为数组来更好地发现这一点:

```{python}
test_info_diff['name'].unique()
```

我们可以使用 `str.strip()` 来移除额外的空格。

```{python}
test_info_diff['name'] = test_info_diff['name'].str.strip()
test_info_diff
```

现在我们可以连接这两个数据集:

```{python}
people.merge(test_info_diff, on='name', how='inner')
```

完美!

::: {.callout-tip title="练习"}

## 练习题:内连接国家

以下两个数据集包含印度、印度尼西亚和菲律宾的数据。然而,这些数据集的 `inner` 连接仅返回 1 行。

```{python}
asia_countries
```

```{python}
asia_population
```

```{python}
pd.merge(asia_countries, asia_population)
```

键列中的值有哪些差异需要在连接数据集之前进行更改?请注意大小写和拼写。

现在,修复 `Country` 列中不匹配的值,然后再次尝试连接。

:::

## 键不匹配:油耗示例

现在让我们看一个键不匹配如何导致问题的更现实的例子。

```{python}
oil_consumption
```

```{python}
tidyr_population
```

尝试进行连接后,我们发现一些国家没有匹配,例如越南。

```{python}
pd.merge(
    oil_consumption, tidyr_population, on=["country", "year"], how="left"
).sort_values(["country", "year"])
```

这是因为两个数据集中的国家名称格式不一致。

在尝试连接这些数据集之前,最好检查键列中的不匹配。这可以帮助您识别可能阻止成功连接的任何差异。

首先,让我们识别两个数据集中唯一的国家名称。

```{python}
oil_countries = set(oil_consumption['country'].unique())
pop_countries = set(tidyr_population['country'].unique())
```

现在,要查找在 `oil_consumption` 中但不在 `tidyr_population` 中的国家,我们可以使用集合运算:

```{python}
missing_in_pop = oil_countries - pop_countries
missing_in_pop
```

以及在 `tidyr_population` 中但不在 `oil_consumption` 中的国家:

```{python}
missing_in_oil = pop_countries - oil_countries
missing_in_oil
```

这些差异表明键列中存在不匹配,需要在连接之前解决。

您可能会尝试手动检查。例如,我们可以看到越南在一个数据集中写作 `Vietnam`,在另一个数据集中写作 `Viet Nam`。

然而,对于国家来说,还有一个更好的解决方案:使用国家代码!我们将在下一节中看到如何做到这一点。

::: {.callout-note title="旁注"}

## 集合运算

对于不熟悉的人来说,快速介绍一下集合运算。

考虑两个数字集合 1:5 和 2:4。

```{python}
set_1 = set([1, 2, 3, 4, 5])
set_2 = set([2, 3, 4])
```

我们可以通过集合运算检查 `set_1` 中不在 `set_2` 中的值:

```{python}
set_1 - set_2
```

以及使用以下方法检查 `set_2` 中不在 `set_1` 中的值:

```{python}
set_2 - set_1
```

:::

### 使用国家代码进行合并

为了避免国家不匹配,通常使用国家代码而不是国家名称作为键会很有用。

现在,让我们向两个数据集中添加国家代码并再次尝试连接。

```{python}
# 如何使用 country_converter
cc.convert("Nigeria", to='ISO3')
```

```{python}
oil_consumption['country_code'] = cc.convert(oil_consumption['country'], to='ISO3')
tidyr_population['country_code'] = cc.convert(tidyr_population['country'], to='ISO3')
```

```{python}
oil_pop_code = oil_consumption.merge(tidyr_population, on=['country_code', 'year'], how='left')
```

### 识别剩余的不匹配

让我们看看哪些国家仍未找到匹配:

```{python}
set(oil_pop_code['country_code'].unique()) - set(tidyr_population['country_code'].unique())
```

似乎 'TWN'(台湾)未能找到匹配。我们可以手动查看 `tidyr_population` 数据集,看看是否能找到它。

```{python}
tidyr_population.query("country.str.contains('Taiwan')")
```

为了防止大小写不匹配,我们还可以检查 'taiwan':

```{python}
tidyr_population.query("country.str.contains('taiwan')")
```

我们还可以检查 'China',因为目前关于台湾是否属于中国存在争议。

```{python}
tidyr_population.query("country.str.contains('China')")
```

似乎台湾不在 `tidyr_population` 数据集中。

在这种情况下,您可能会尝试找到包含台湾人口数据的数据集,并将其添加到 `tidyr_population` 数据集中。但我们留给您自行解决。

::: {.callout-tip title="练习"}

## 练习题:将油耗与地理数据合并

运行代码查看这两个数据集。

第一个数据集 `oil_2012` 记录了 2012 年的油耗:

```{python}
oil_2012
```

而 `country_regions` 列出了国家及其相应的地区和大陆:

```{python}
country_regions
```

使用国家代码作为键连接这两个数据集。然后找出每个大陆油耗最高的国家。作为合理性检查,您的答案应包括美国和中国。

```{python}
oil_2012['country_code'] = cc.convert(oil_2012['country'], to='ISO3')

oil_2012_regions = oil_2012.merge(country_regions, on='country_code', how='left')

max_oil_by_continent = oil_2012_regions.loc[
    oil_2012_regions.groupby('continent')['oil_consump'].idxmax()
]

max_oil_by_continent[['country', 'continent', 'oil_consump']]
```

:::

# 总结!

在本课程中,我们探讨了与 Python 中的数据框连接相关的几个高级概念:

1. **一对多关系**:我们学习了当一个数据框中的一个观测值对应另一个数据框中的多个观测值时,连接是如何工作的,以及“单”方的数据如何为“多”方的每个匹配行重复。

2. **多键连接**:我们发现了如何使用多个列作为键进行数据框连接(例如,将街道名称与时间点结合),这对于在单个列不足以唯一标识观测值时保持数据完整性至关重要。

3. **键不匹配**:我们探讨了从不同来源连接数据时常见的挑战,包括:
   - 大小写敏感问题(例如,“Alice” vs “alice”)
   - 尾随空格
   - 拼写变化
   - 使用标准化代码(如国家代码)以确保匹配一致性

这些技能对于实际的数据分析至关重要,因为现实中数据通常来自多个来源,需要在有效组合之前进行仔细的清理和准备。