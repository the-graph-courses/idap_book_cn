---
title: '选择列子集'
---

```{python}
# | echo: false
# Setup
import pandas as pd

pd.options.display.max_rows = 5
```

## 介绍

今天我们将开始探索使用 pandas 进行数据处理!

我们的第一个重点将是选择和重命名列。通常,您的数据集包含许多您不需要的列,您希望将其缩减为几列。Pandas 使这变得容易。让我们来看一下。

## 学习目标

-   您可以使用方括号 `[]`、`filter()` 和 `drop()` 从 DataFrame 中保留或删除列。
-   您可以使用 `filter()` 根据正则表达式模式选择列。
-   您可以使用 `rename()` 更改列名。
-   您可以使用正则表达式清理列名。

## 关于 pandas

Pandas 是一个流行的数据处理和分析库。它旨在使在 Python 中处理表格数据变得容易。

如果尚未安装,请在终端中使用以下命令安装 pandas:

```{python}
# | eval: false
pip install pandas 
```

然后在脚本中使用以下命令导入 pandas:

```{python}
import pandas as pd
```

## 雅温得 COVID-19 数据集

本课中,我们分析了 2020 年底在喀麦隆雅温得进行的一项 COVID-19 调查的结果。该调查通过抗体检测估计了该地区有多少人感染了 COVID-19。

您可以在此处了解有关此数据集的更多信息: [https://www.nature.com/articles/s41467-021-25946-0](https://www.nature.com/articles/s41467-021-25946-0)

要下载数据集,请访问此链接: [https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/yaounde_data.zip](https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/yaounde_data.zip)

然后解压文件,并将 `yaounde_data.csv` 文件放在与笔记本相同目录下的 `data` 文件夹中。

让我们加载并检查数据集:

```{python}
yao = pd.read_csv("data/yaounde_data.csv")
yao
```

## 使用方括号 `[]` 选择列

在 pandas 中,选择列的最常用方法是简单地使用方括号 `[]` 和列名。例如,要选择 `age` 和 `sex` 列,我们输入:

```{python}
yao[["age", "sex"]]
```

注意双重方括号 `[[]]`。没有它,您将收到一个错误:

```{python}
# | eval: false
yao["age", "sex"]
```

```
KeyError: ('age', 'sex')
```

如果您想选择单个列,您*可以省略双重方括号*,但输出将不再是 DataFrame。比较以下内容:

```{python}
yao["age"] # does not return a DataFrame
```

```{python}
yao[["age"]]  # returns a DataFrame
```

::: {.callout-note title="关键点"}

## 存储数据子集

注意,这些选择并没有修改 DataFrame 本身。如果我们想要修改后的版本,我们需要创建一个新的 DataFrame 来存储子集。例如,下面我们创建了一个仅包含三列的子集:

```{python}
yao_subset = yao[["age", "sex", "igg_result"]]
yao_subset
```

如果我们想要覆盖一个 DataFrame,我们可以将子集重新赋给原始 DataFrame。让我们将 `yao_subset` DataFrame 覆盖为仅包含 `age` 列:

```{python}
yao_subset = yao_subset[["age"]]
yao_subset
```

`yao_subset` DataFrame 已从 3 列变为 1 列。

:::

::: {.callout-tip title="练习"}

### 练习题:使用 `[]` 选择列

-   使用 `[]` 运算符选择 `yao` DataFrame 中的 "weight_kg" 和 "height_cm" 变量。将结果赋值给一个名为 `yao_weight_height` 的新 DataFrame。然后打印这个新 DataFrame。

```{python}
# Your code here
```

:::

::: {.callout-note title="专业提示"}

在 pandas 中,有许多方法可以选择列。在闲暇时间,您可以选择探索 `.loc[]` 和 `.take()` 方法,它们提供了额外的功能。 

:::

## 使用 `drop()` 排除列

有时删除不需要的列比明确选择需要的列更有用。

要删除列,我们可以使用带有 `columns` 参数的 `drop()` 方法。要删除 age 列,我们输入:

```{python}
yao.drop(columns=["age"])
```

要删除几列:

```{python}
yao.drop(columns=["age", "sex"])
```

同样,注意这并没有修改 DataFrame 本身。如果我们想要修改后的版本,我们需要创建一个新的 DataFrame 来存储子集。例如,下面我们创建了一个删除 age 和 sex 的子集:

```{python}
yao_subset = yao.drop(columns=["age", "sex"])
yao_subset
```

::: {.callout-tip title="练习"}

### 练习题:使用 `drop()` 删除列

-   从 `yao` DataFrame 中**删除** `highest_education` 和 `consultation` 列。将结果赋值给一个名为 `yao_no_education_consultation` 的新 DataFrame。打印这个新 DataFrame。

```{python}
# Your code here
```
:::

## 使用 `filter()` 按正则表达式选择列

`filter()` 方法及其 `regex` 参数提供了一种基于列名中模式来选择列的强大方式。例如,要选择包含字符串 "ig" 的列,我们可以编写:

```{python}
yao.filter(regex="ig")
```

参数 `regex` 指定要匹配的模式。Regex 代表正则表达式,指的是定义搜索模式的字符序列。

要选择**以**字符串 "ig" **开头**的列,我们编写:

```{python}
yao.filter(regex="^ig")
```

符号 `^` 是一个正则表达式字符,匹配字符串的开头。

要选择**以**字符串 "result" **结尾**的列,我们可以编写:

```{python}
yao.filter(regex="result$")
```

字符 `$` 是正则表达式,它匹配字符串的结尾。

::: {.callout-note title="专业提示"}

正则表达式非常难以记忆,但像 ChatGPT 这样的 LLM 在生成正确的模式方面非常擅长。例如,只需询问:“以 'ig' 开头的字符串的正则表达式是什么?”

:::

::: {.callout-tip title="练习"}

### 练习题:使用正则表达式选择列

-   选择 `yao` DataFrame 中所有以 "is_" 开头的列。将结果赋值给一个名为 `yao_is_columns` 的新 DataFrame。然后打印这个新 DataFrame。

```{python}
# Your code here
```

:::

## 使用 `rename()` 更改列名

我们可以使用 `rename()` 方法更改列名:

```{python}
yao.rename(columns={"age": "patient_age", "sex": "patient_sex"})
```

::: {.callout-tip title="练习"}

### 练习题:使用 `rename()` 重命名列

-   将 `yao` DataFrame 中的 `age_category` 列重命名为 `age_cat`。将结果赋值给一个名为 `yao_age_cat` 的新 DataFrame。然后打印这个新 DataFrame。

```{python}
# Your code here
```

:::

## 清理混乱的列名

要清理列名,您可以在 pandas 中使用带有 `str.replace()` 方法的正则表达式。 

这里是如何在具有混乱列名的测试 DataFrame 上进行操作。混乱的列名是指包含空格、特殊字符或其他非字母数字字符的名称。

```{python}
test_df = pd.DataFrame(
    {"good_name": range(3), "bad name": range(3), "bad*@name*2": range(3)}
)
test_df
```

这样的列名并不理想,因为例如,我们无法像处理干净的名称那样使用点操作符选择它们:

```{python}
test_df.good_name  # this works
```

但这不起作用:

```{python}
# | eval: false
test_df.bad name
```

```
      test_df.bad name
                 ^
SyntaxError: invalid syntax
```

我们可以使用 `str.replace()` 方法结合正则表达式自动清理这些名称。

```{python}
clean_names = test_df.columns.str.replace(r'[^a-zA-Z0-9]', '_', regex=True)
```

正则表达式 `r'[^a-zA-Z0-9]'` 匹配任何不是字母(无论是大写还是小写)或数字的字符。`str.replace()` 方法将这些字符替换为下划线 ('\_'),使列名更易读并可在点表示法中使用。

现在我们可以用清理过的名称替换 DataFrame 中的列名:

```{python}
test_df.columns = clean_names
test_df
```

::: {.callout-tip title="练习"}

### 练习题:使用正则表达式清理列名

- 考虑下方定义的具有混乱列名的数据框。使用 `str.replace()` 方法清理列名。

```{python}
cleaning_practice = pd.DataFrame(
    {"Aloha": range(3), "Bell Chart": range(3), "Animals@the zoo": range(3)}
)
cleaning_practice
```

:::

---

## 总结

希望本课向您展示了 pandas 在数据处理方面是多么直观和有用!

这是系列基础数据整理技术的第一课:下节课再见,了解更多内容。